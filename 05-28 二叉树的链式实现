#pragma once
#include<stdio.h>
#include<string.h>
#include<assert.h>
#include<stdbool.h>
#include<stdlib.h>


typedef int BTDataType;
typedef struct BinaryTreeNode//二叉树 用的链式结构 方法：递归
{
	BTDataType data;
	struct BinaryTreeNode* left;
	struct BinaryTreeNode* right;
}BTNode;


BTNode* BuyNode(BTDataType x);//二叉树的初始化




void PrevOrder(BTNode* root);//前序排列
void InOrder(BTNode* root);//中序排列
void PostOrder(BTNode* root);//后续排列


int TreeSize(BTNode* root);//二叉树节点个数
int LeafSize(BTNode* root);//二叉树叶子节点个数
int TreeHigh(BTNode* root);//二叉树的高度
int LevelSize(BTNode* root,int k);//二叉树的第k层的节点个数

#include"BTNode.h"


BTNode* BuyNode(BTDataType x)
{
	BTNode* node = (BTNode*)malloc(sizeof(BTNode));
	if (node == NULL)
	{
		perror("malloc fail");
		exit(-1);
	}
	node->data = x;
	node->left = node->right = NULL;
	return node;
}


void PrevOrder(BTNode* root)//前序排列  根 左 右
{
	if (root == NULL) //节点为空 就打印NULL 在返回上一层
	{
		printf("NULL ");
		return;
	}
	printf("%d ", root->data); // 先打印根节点
	PrevOrder(root->left);//在迭代左节点
	PrevOrder(root->right);//在迭代右节点
}


void InOrder(BTNode* root)//中序排列 左 根 右
{
	if (root == NULL)
	{
		printf("NULL ");
		return;
	}
	InOrder(root->left);
	printf("%d ", root->data);
	InOrder(root->right);
}


void PostOrder(BTNode* root)//后序遍历 左 右 根
{
	if (root == NULL)
	{
		printf("NULL ");
		return;
	}
	PostOrder(root->left);
	PostOrder(root->right);
	printf("%d ", root->data);
}


int TreeSize(BTNode* root)//计算二叉树的节点个数
{
	if (root == NULL)
		return 0;


	/*static int size = 0;
	size++;
	TreeSize(root->left);
	TreeSize(root->right);
	return size;
	静态变量可以使用一次，但不能重复使用
	*/
	//较为麻烦
	/*size++;
	TreeSize(root->left);
	TreeSize(root->right);*/
	//将左右孩子的树的度都加起来 再加个根节点 即+1 即可
	return root == NULL ? 0 : TreeSize(root->left) + TreeSize(root->right) + 1;
}


int LeafSize(BTNode* root)//计算二叉树的叶子节点
{
	if (root == NULL)
	{
		return 0;
	}
	if (root->left == NULL && root->right == NULL)
	{
		return 1;
	}
	return LeafSize(root->left) + LeafSize(root->right);
}


int TreeHigh(BTNode* root)
{
	if (root == NULL)
	{
		return 0;
	}
	//这种方法效率太低了，调用完上面的 下一次 还得重新调用 时间上太慢了
	//return TreeHigh(root->left) > TreeHigh(root->right) ? TreeHigh(root->left) + 1 : TreeHigh(root->right) + 1;
	int lefthigh = TreeHigh(root->left);
	int righthigh = TreeHigh(root->right);
	return lefthigh > righthigh ? lefthigh + 1 : righthigh + 1;
}


int LevelSize(BTNode* root, int k) //第k层节点的个数
{
	//分三类 为空 就为0 为1 就返回1个 剩下的就返回左右边K-1层之和
	if (root == NULL)
		return 0;
	if (k == 1)
		return 1;
	return LevelSize(root->left, k - 1) + LevelSize(root->right, k - 1);
}

#include"BTNode.h"
extern int size = 0;




int main()
{
	BTNode* n1 = BuyNode(1);
	BTNode* n2 = BuyNode(2);
	BTNode* n3 = BuyNode(3);
	BTNode* n4 = BuyNode(4);
	BTNode* n5 = BuyNode(5);
	BTNode* n6 = BuyNode(6);
	n1->left  = n2;
	n1->right = n4;
	n2->left  = n3;
	n4->left  = n5;
	n4->right = n6;


	printf("前序遍历为：");
	PrevOrder(n1);
	printf("\n");


	printf("中序遍历为：");
	InOrder(n1);
	printf("\n");


	printf("后序遍历为：");
	PostOrder(n1);
	printf("\n");


	int size = TreeSize(n1);
	printf("二叉树的节点个数为：%d ", size); 
	printf("\n");


	int leaf = LeafSize(n1);
	printf("二叉树的叶子节点个数为：%d", leaf);
	printf("\n");


	int high = TreeHigh(n1);
	printf("二叉树的高度：%d", high);
	printf("\n");


	int levelsize = LevelSize(n1, 2);
	printf("二叉树第%d层的节点个数为：%d", TreeHigh(n1), 2);
}

