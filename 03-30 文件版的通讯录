#pragma once
#pragma warning(disable : 4996)
#include<Windows.h>
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<assert.h>
#define max_name  20
#define max_sex 6
#define max_tele 20
#define max_add 30
#define MAX 100
#define capacity_max 3
#define add_max 2
struct peoinfor
{
	char name[max_name];
	char sex[max_sex];
	int age;
	char tele[max_tele];
	char add[max_add];
};
struct contract
{
	struct peoinfor* data;//指向动态申请的空间，用来存放联系人的信息
	int sz;//记录的是当前通讯录中有效信息的个数
	int capacity;//记录当前通讯录的最大容量
};
//通讯录文件读取功能
void Loadcontract(struct contract* p);
//初始化通讯录
void Intcontract(struct contract* p);
//声明添加功能
void Add(struct contract* p);
//声明查看功能
void Show(struct contract* p);
//声明删除功能
void Del(struct contract* p);
//声明修改功能
void Modify(struct contract* p);
//声明排序功能
void Sort(struct contract* p);
//声明查找功能
void Search(struct contract* p);
//检测增容的问题
static int check_capacity(struct contract* p);
//释放空间功能
void Exit(struct  contract* p);
//通讯录文件保存功能
void Savecontract(struct contract* p);

//通讯录文件读取功能
void Loadcontract(struct contract* p)
{
	//打开文件
	FILE* pfr = fopen("data.txt", "rb");
	if (pfr == NULL)
	{
		perror("LoadContract::fopen");//没有创建过此文件
		return;
	}
	//读文件
	struct peoinfor tmp = { 0 };//创建一个临时变量用来读取文件
	while (fread(&tmp, sizeof(struct peoinfor), 1, pfr))//一个一个读取，如果读完了就为0,跳出循环
	{
		check_capacity(p);//检查容量，如果容量不够就添加
		p->data[p->sz] = tmp;
		p->sz++;
	}
	//关闭文件
	fclose(pfr);
	pfr = NULL;
}
void Intcontract(struct contract* p)
{
	assert(p);
	p->data = (struct	peoinfor*)malloc(capacity_max * sizeof(struct peoinfor));//动态内存开辟内存容量最大的空间
	if (p->data == NULL)
	{
		perror("Intcontract()");//开辟失败就报错
		return;
	}
	p->sz = 0;
	p->capacity = capacity_max;
	Loadcontract(p);

}

static check_capacity(struct contract* p)
{
	if (p->sz == p->capacity)//如果当前容量已经到达最大容量就扩容
	{
		//增加容量
		struct peoinfor* ptr = (struct peoinfor*)realloc(p->data, (p->capacity + add_max) * sizeof(struct peoinfor));//目的地 扩容多大
		if (ptr != NULL)
		{
			p->capacity += add_max;
			p->data = ptr;
			printf("增容成功\n");
			return 1;
		}
		else
		{
			perror("check_capacity()");
			return 0;
		}
	}
	else//没有到达就返回
	{
		return 1;
	}
}

void Add(struct contract* p)
{
	assert(p);
	if (check_capacity(p) == 0)//为0就有问题，没有开辟出来空间
	{
		return;
	}
	//剩下的就输入信息
	printf("请输入姓名：");
	scanf("%s", p->data[p->sz].name);
	printf("请输入性别：");
	scanf("%s", p->data[p->sz].sex);
	printf("请输入年龄：");
	scanf("%d", &(p->data[p->sz].age));
	printf("请输入电话号：");
	scanf("%s", p->data[p->sz].tele);
	printf("请输入地址：");
	scanf("%s", p->data[p->sz].add);
	p->sz++;
	printf("添加成功\n");
}

void Show(struct contract* p)
{
	int i = 0;
	printf("%-10s\t%-6s\t%-6s\t%-12s\t%-20s\n", "名字", "性别", "年龄", "电话", "地址");//水平制表
	for (i = 0; i < (p->sz); i++)
	{
		printf("%-10s\t%-6s\t%-6d\t%-12s\t%-20s\n", p->data[i].name, p->data[i].sex,
			p->data[i].age, p->data[i].tele, p->data[i].add);
	}
}

int findname(struct contract* p, char name[])//比较名字
{
	int i = 0;
	for (i = 0; i < p->sz; i++)//一个一个比较，通过strcmp函数比较，如果为零就相同
	{
		if (0 == strcmp(p->data[i].name, name))
		{
			return i;
		}
	}
	return -1;//找不到返回-1
}

void Del(struct contract* p)
{
	char name[max_name];//创建临时数组用来储存查找的姓名
	printf("请输入你想要删除的姓名：");
	scanf("%s", name);
	int ret = findname(p, name);
	if (ret == -1)
	{
		printf("查找不到，无法删除\n");
	}
	else
	{
		int j = 0;
		for (j = ret; j < p->sz - 1; j++)//将后面的所有的都往前挪一位
		{
			p->data[j] = p->data[j + 1];
		}
		p->sz--;//删一个容量
		printf("删除成功\n");
	}
}

void Modify(struct contract* p)
{
	char name[max_name];//创建临时数组用来储存查找的姓名
	printf("请输入你想修改信息的姓名");
	scanf("%s", name);
	int ret = findname(p, name);
	if (ret == -1)
	{
		printf("查找不到\n");
	}
	else
	{
		printf("请输入姓名：");
		scanf("%s", p->data[ret].name);
		printf("请输入性别：");
		scanf("%s", p->data[ret].sex);
		printf("请输入年龄：");
		scanf("%d", &(p->data[ret].age));
		printf("请输入电话号：");
		scanf("%s", p->data[ret].tele);
		printf("请输入地址：");
		scanf("%s", p->data[ret].add);
	}
}

int cmp_age(const void*e1,const void*e2)
{
	return (((struct peoinfor*)e1)->age - ((struct peoinfor*)e2)->age);
}

void Sort(struct contract *p)
{
	assert(p);
	qsort(p->data, p->sz, sizeof(struct peoinfor), cmp_age);//利用qsort函数
	printf("排序成功\n");
}

void Search(struct contract* p)
{
	char name[max_name];//创建临时数组用来储存查找的姓名
	printf("请输入你搜索的姓名:");
	scanf("%s", name);
	int ret = findname(p, name);
	if (ret == -1)
	{
		printf("搜寻不到\n");
	}
	else
	{
		printf("搜寻成功\n");
		printf("%-10s\t%-6s\t%-6s\t%-12s\t%-20s\n", "名字", "性别", "年龄", "电话", "地址");
		printf("%-10s\t%-6s\t%-6d\t%-12s\t%-20s\n", p->data[ret].name, p->data[ret].sex,
			p->data[ret].age, p->data[ret].tele, p->data[ret].add);
	}
}

void Savecontract(struct contract* p)//使用完退出后保存
{
	//打开文件
	FILE* pfw= fopen("data.txt", "wb");
	if (pfw == NULL)
	{
		perror("Savecontract::fopen");
		return;
	}
	//写文件
	int i = 0;//一个一个保存文件
	for (i = 0; i < p->sz; i++)
	{
		fwrite(p->data + i, sizeof(struct peoinfor), 1, pfw);
	}
	//关闭文件
	fclose(pfw);
	pfw = NULL;
}

void Exit(struct contract* p)//退出功能
{
	free(p->data);//释放指针后再置为空
	p->data = NULL;
	p->sz = 0;
	p ->capacity = 0;
}

//测试通讯录
void menu()
{
	printf("************************************\n");
	printf("****    1.Add         2.Del     ****\n");
	printf("****    3.Search      4.Modify  ****\n");
	printf("****    5.Show        6.Sort    ****\n");
	printf("****    0.exit                  ****\n");
	printf("************************************\n");
}
enum input
{
	EXIT,
	ADD,
	DEL,
	SEARCH,
	MODIFY,
	SHOW,
	SORT

};
int main()
{
	int input = 0;
	//创建通讯录
	struct contract con;
	//初始化通讯录
	Intcontract(&con);
	do
	{
		menu();
		printf("请输入选择：");
		scanf("%d", &input);
		switch (input)
		{
		case ADD:
			Add(&con);
			Sleep(1000);
			system("cls");
			break;
		case DEL:
			Del(&con);
			Sleep(1000);
			system("cls");
			break;
		case SEARCH:
			Search(&con);
			Sleep(1000);
			system("cls");
			break;
		case MODIFY:
			Modify(&con);
			Sleep(1000);
			system("cls");
			break;
		case SHOW:
			Show(&con);
			Sleep(2000);
			system("cls");
			break;
		case SORT:
			Sort(&con);
			Sleep(1000);
			system("cls");
			break;
		case EXIT:
			Savecontract(&con);
			printf("保存成功\n");
			Exit(&con);
			printf("退出成功\n");
			Sleep(1000);
			system("cls");
			break;
		default:
			printf("输入错误,请重新输入：\n");
			Sleep(100);
			system("cls");
			break;
		}
	} while (input);
	return 0;
}
