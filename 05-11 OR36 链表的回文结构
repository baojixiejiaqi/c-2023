/*
struct ListNode {
    int val;
    struct ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};*/
class PalindromeList {
public:
    bool chkPalindrome(ListNode* A) 
    {
        struct ListNode * mid = middleNode(A);//先找到这个链表的中间结点
        struct ListNode* rhead =reverseList(mid);//然后把中间结点后面的全部翻转了
        while(A&&rhead)//两个都不为空
        {
            if(A->val != rhead->val)//如果相等就flase
            {
                return false;
            }
            A=A->next;//两个都往后挪一个
            rhead = rhead->next;
        }
        return true;//循环结束就为回文数组
    }
    //利用快慢指针，慢的每次走一个，快的每次走两个，快的走完刚好，慢的走一半
    struct ListNode* middleNode(struct ListNode* head)
    {
    struct ListNode*fast,*slow;//定义快 慢指针
    fast = slow = head;//两个同时指向头结点
    while(fast &&fast->next)//fast是判断链表数字总和为奇数位时，slow是判断链表数字总和为偶数位的时候
    {
        fast = fast->next->next;//快的走两步
        slow = slow->next;//慢的走一步
    }
    return slow;//返回慢的即是要找的中间节点
    }
    struct ListNode* reverseList(struct ListNode* head)
    {   
    if(head ==NULL)//如果为空链表就返回
    {
        return NULL;
    }
    struct ListNode * n1,*n2,*n3;//创立三个节点
    n1 = NULL;//n1置为空
    n2 = head;//n2指向头结点
    n3 = n2->next;//n3指向下一个节点
    while(n2)
    {
        n2->next = n1;//n1往后挪一位
        n1 = n2;//n2往后挪一位
        n2 = n3;//n3往后挪一位
        if(n3)//n3如果不为空
            n3 = n3->next;//n3就往后挪一位，如果为空，链表执行到n2 = n3就退出循环
    }
    return n1;
    }
};
