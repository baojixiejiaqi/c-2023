/*
struct ListNode {
    int val;
    struct ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};*/
#include <cstddef>
class Partition 
{
public:
    ListNode* partition(ListNode* pHead, int x) 
    {
        struct ListNode *lesshead,*lesstail;//创建分组，小于目标数字的放一链表，大的放一链表
        struct ListNode *bighead,*bigtail;
        lesshead = lesstail = (struct ListNode*)malloc(sizeof(struct ListNode));//给两个链表开辟空间
        bighead = bigtail =(struct ListNode*)malloc(sizeof(struct ListNode));
        bigtail ->next = lesstail->next = NULL;//将两个的两个链表的尾指针置空
        struct ListNode*cur = pHead;//创建一个临时变量用来移动头结点
        while(cur)//没到末尾就继续
        {
            if(cur->val <x)//当前数字小于目标数字
            {
                lesstail->next = cur;//就将当前地址赋予lesstail的指针
                lesstail =lesstail->next;//指针往后走一个
            }
            else //反之
            {
                bigtail->next =cur;//就将当前地址赋予bigtail的指针
                bigtail = bigtail->next;//指针往后走一个
            }
            cur = cur->next;//处理完一个数字，cur往后挪一个，处理下一个数字
        }
        //处理完毕
        lesstail->next =bighead->next;//链接链表，将大的链表的头结点链接到小的链表的尾结点
        bigtail->next =NULL;//大链表的尾结点再置空
        pHead=lesshead->next;//改变起始地址
        free(lesshead);//释放
        free(bighead);
        return pHead; //返回
    }
       
};
