#pragma once
#include<stdio.h>
#include<stdlib.h>
#include<assert.h>
#define N 10

////数据类型
//typedef int SLDataType;
////静态顺序表-- 不太实用
//typedef struct SeqList
//{
//	SLDataType a[N];
//	int size;//记录多少个有效数据
// }SL;
//
//void SLinit(SL s);
////顺序表的尾插
//void SLPushBack(sl s, SLDataType x);

//数据类型
typedef int SLDataType;
//动态顺序表 - 需要指针
typedef struct SeqList
{
	SLDataType *a;//指针方便查找角标
	int size;//记录多少个有效数据
	int capacity;//记录空间容量大小
}SL;

void SLPrint(SL* ps);
void SLInit(SL * ps);
void SLDestory(SL* ps);

//顺序表的尾插尾删
void SLPushBack(SL * ps, SLDataType x);
void SLPopBack(SL * ps);

// 头插头删
void SLHeadPush(SL* ps, SLDataType x);
void SLHeadPop(SL* ps);

//在pos处插入数据
void SLInsert(SL* ps, int pos, SLDataType x);

//检查容量
void SLCheckCapacity(SL* ps);

//在pos处删除数据
void SLDelete(SL* ps, int pos);

//查找数据
int SLFind(SL* ps, SLDataType x,int begin);



#include"SeqList.h"

void SLInit(SL *ps)//初始化
{
	assert(ps);

	ps->a = NULL;
	ps->capacity = 0;
	ps->size = 0;
}

void SLCheckCapacity(SL*ps) //尾插
{
	assert(ps);
	//扩容
	if (ps->size == ps->capacity)//如果容量相等就扩容
	{
		int NewCapacity = ps->capacity == 0 ? 4:(ps->capacity *2);//不到4就等到4，超过四就给内存扩容
		SLDataType* tmp = (SLDataType*)realloc(ps->a, NewCapacity * sizeof(SLDataType));//开辟空间
		if (tmp == NULL)
		{
			perror("realloc fail!");
			exit(-1);
		}
		ps->a = tmp;
		ps->capacity = NewCapacity;//容量变为新的容量
	}

}
void SLDestory(SL* ps)//销毁
{
	assert(ps);

	//if (ps->a != NULL)
	if(ps->a)
	{
		free(ps->a);
		ps->a = NULL;
		ps->capacity = ps->size = 0;
	}
}

void SLPrint(SL* ps)//打印
{
	assert(ps);
	for (int i = 0; i < ps->size; i++)//0 - size 逐个打印
	{
		printf("%d", ps->a[i]);
	}
	printf("\n");
}

void SLPopPush(SL* ps,SLDataType x)//尾插
{
	SLCheckCapacity(ps);

	SLInsert(ps, ps->size, x);//在size位置插入
}

void SLPopBack(SL * ps)//尾删
{
	assert(ps);//ps不能为空
	//温柔的检查
	if (ps->size == 0)
	{
		return;
	}
	//暴力检查
	assert(ps->size> 0);
	ps->size--;//尾部减一
}

//在pos位置删除
void SLDelete(SL* ps, int pos)
{
	assert(ps);
	assert(pos >= 0);
	assert(pos < ps->size);
	//挪动数据移动
	int begin = pos + 1; //从目标的右手挪 挪的话 少一次 到size就不挪了
	while (begin < ps->size) //不能删除最后的空格
	{
		ps->a[begin - 1] = ps->a[begin];
		begin++;
	}
	ps->size--;
}

//在pos位置插入
void SLInsert(SL* ps, int pos, SLDataType x)
{
	assert(ps);//ps不能为空，且不能小于0和大于size范围
	assert(pos >= 0);
	assert(pos <= ps->size);
	SLCheckCapacity(ps);//检查容量

	int end = ps->size - 1;//定义尾部
	while (end >= pos)
	{
		ps->a[end+1] = ps->a[end ];
		end--;
	}//如果末尾比要插的位置大 就往后挪
	//到了位置就赋值 size +1
	ps->a[pos] = x;
	ps->size++;
}

//头插
void SLHeadPush(SL* ps, SLDataType x)
{
	assert(ps);
	SLCheckCapacity(ps);
	
	SLInsert(ps, 0, x);
}

//头删
void SLHeadPop(SL* ps)
{
	assert(ps);
	SLCheckCapacity(ps);

	SLDelete(ps, 0);
}

//查找数据
int SLFind(SL* ps, SLDataType x,int begin)
{
	assert(ps);
	for (int i = begin; i < ps->size; i++)//查找pos位置到末尾的数据，查找到了，就返回下标
	{
		if (ps->a[i] == x)
		{
			return i;
		}
	}
	return -1;
}




#include "SeqList.h"
#include"SeqList.h"

//void TestSeqList1()
//{
//	SL sl;
//	SLInit(&sl);
//	SLPushBack(&sl, 4);
//	SLPushBack(&sl, 22);
//	SLPushBack(&sl, 1);
//	SLPushBack(&sl, 43);
//	SLPushBack(&sl, 15);
//	SLPrint(&sl);
//	SLPopBack(&sl);
//	SLPopBack(&sl);
//	SLPopBack(&sl);
//	SLPopBack(&sl);
//	SLPrint(&sl);
//	SLDestory(&sl);
//}

//void TestSeqList2()
//{
//	SL sl;
//	SLInit(&sl);
//	SLPopPush(&sl, 11);
//	SLPopPush(&sl, 22);
//	SLPopPush(&sl, 33);
//	SLPopPush(&sl, 44);
//	SLPopPush(&sl, 55);
//	SLPrint(&sl);
//	SLPopBack(&sl);
//	SLPrint(&sl);
//	SLInsert(&sl, 0, 55);
//	SLPrint(&sl);
//}

//void TestSeqList3()
//{
//	SL sl;
//	SLInit(&sl);
//	SLPopPush(&sl, 12);
//	SLPopPush(&sl, 43);
//	SLPopPush(&sl, 15);
//	SLPopPush(&sl, 99);
//	SLPrint(&sl);
//	SLHeadPush(&sl, 521);
//	SLPrint(&sl);
//	SLHeadPop(&sl);
//	SLPrint(&sl);
//	SLDestory(&sl);
//}

void TestSeqList6()
{
	SL sl;
	SLInit(&sl);
	SLPopPush(&sl, 1);
	SLPopPush(&sl, 2);
	SLPopPush(&sl, 3);
	SLPopPush(&sl, 4);
	SLPopPush(&sl, 5);
	SLPopPush(&sl, 7);
	SLPopPush(&sl, 5);
	SLPopPush(&sl, 8);
	SLPopPush(&sl, 5);
	SLPrint(&sl);
	int pos = SLFind(&sl, 5, 0);//删除顺序表所有的5
	while (pos != -1)
	{
		SLDelete(&sl, pos);
		pos = SLFind(&sl, 5, pos);
	}
	SLPrint(&sl);
	SLDestory(&sl);
}

int main()
{
	TestSeqList6();


	return 0;
}
