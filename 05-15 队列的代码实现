#pragma once
#include<stdio.h>
#include<stdlib.h>
#include<assert.h>
#include<stdbool.h>

typedef int QDataType;
typedef struct QueueNode  //创建队列
{
	struct QueueNode* next;
	QDataType data;	
}QNode;

typedef struct Queue
{
	QNode* head;
	QNode* tail;
	int size;
}Queue;

void QueueInt(Queue* pq);//初始化队列
void QueueDestory(Queue* pq);//销毁队列
bool QueueEmpty(Queue* pq);//判断是否为空

void QueuePush(Queue* pq,QDataType x);//入队列
void QueuePop(Queue* pq);//出队列

QDataType QueueFront(Queue* pq);//返回队列顶的元素
QDataType QueueBack(Queue* pq);//返回队列低的元素

int QueueSize(Queue*);//计算队列元素大小

#include"queue.h"

void QueueInt(Queue* pq)//队列的初始化
{
	assert(pq);
	pq->head = NULL;
	pq->tail = NULL;
	pq->size = 0;
}

void QueueDestory(Queue* pq)//销毁队列
{
	assert(pq);
	QNode* cur = pq->head;//从队头到队尾 先进先出
	while (cur)
	{
		QNode* del = cur;
		cur = cur->next;
		free(del);
	}
	pq->head = pq->tail = NULL; //置空，size再为0
	pq->size = 0;
}

bool QueueEmpty(Queue* pq)
{
	assert(pq);
	return pq->head == NULL && pq->tail == NULL;
}

void QueuePush(Queue* pq,QDataType x)//队列的入列
{
	assert(pq);
	QNode* newnode = (QNode*)malloc(sizeof(QNode));//开辟新结点空间
	if (newnode == NULL)
	{
		perror("malloc fail");
		exit(-1);
	}
	newnode->data = x;
	newnode->next = NULL;
	if (pq->tail == NULL)//为空指向头结点
	{
		pq->head = pq->tail = newnode;
	}
	else
	{
		pq->tail->next = newnode;//将tail的下一块地址指向newnode
		pq ->tail = newnode;//tail 在往下走到下一个结点
	}
	pq->size++;
}

void QueuePop(Queue* pq)//队列的出列
{
	assert(pq);
	assert(!QueueEmpty(pq));

	if (pq->head->next == NULL)//如果只有一个元素
	{
		free(pq->head);
		pq->head = pq->tail = NULL;//就是释放这个结点
	}
	else
	{
		QNode* del = pq->head;
		pq->head = pq->head->next;
		free(del);
	}
	pq->size--;
}

QDataType QueueFront(Queue* pq)//返回队列顶的元素
{
	assert(pq);
	assert(!QueueEmpty(pq));

	return pq->head->data;
}

QDataType QueueBack(Queue* pq)
{
	assert(pq);
	assert(!QueueEmpty(pq));//返回队列尾的元素

	return pq->tail->data;
}

int QueueSize(Queue* pq)//计算队列的个数
{
	assert(pq);
	return pq ->size;
}


#include"queue.h"

void test1()
{
	Queue q;
	QueueInt(&q);
	QueuePush(&q, 1);
	QueuePush(&q, 2);
	QueuePush(&q, 3);
	printf("%d\n", QueueFront(&q));
	printf("%d\n", QueueBack(&q));
	QueuePop(&q);
	printf("%d\n", QueueSize(&q));
	QueuePush(&q, 4);
	QueuePush(&q, 6);
	printf("%d\n", QueueSize(&q));
	printf("%d\n", QueueEmpty(&q));
	printf("%d\n", QueueFront(&q));
	printf("%d\n", QueueBack(&q));

}

int main()
{
	test1();
}
